[
  {
    "role_slug": "software-developer",
    "text": "Tell me about a time you inherited code with little documentation. How did you safely add a new feature?",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "legacy",
      "documentation",
      "refactoring",
      "feature"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Describe how you break down a large feature request into deliverables for a two-week sprint.",
    "category": "behavioral",
    "difficulty": 2,
    "expected_duration_sec": 120,
    "keywords": [
      "planning",
      "agile",
      "sprint",
      "deliverables"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "How would you design an in-memory cache with time-based eviction?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 180,
    "keywords": [
      "cache",
      "eviction",
      "data structures",
      "ttl"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Walk me through how a RESTful POST request travels through a typical web application stack.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "http",
      "rest",
      "backend",
      "request lifecycle"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "What signals tell you that a codebase needs refactoring, and how do you align that with delivery timelines?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "refactoring",
      "technical debt",
      "stakeholders"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Explain the tradeoffs between optimistic and pessimistic locking.",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 180,
    "keywords": [
      "concurrency",
      "transactions",
      "locking",
      "databases"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Share a time you resolved a production incident that required coordination across teams.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "incident",
      "communication",
      "ownership"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "How do you ensure code quality when shipping features rapidly?",
    "category": "role_specific",
    "difficulty": 2,
    "expected_duration_sec": 120,
    "keywords": [
      "code quality",
      "testing",
      "reviews",
      "automation"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Design a rate limiter for an API that handles burst traffic gracefully.",
    "category": "technical",
    "difficulty": 5,
    "expected_duration_sec": 210,
    "keywords": [
      "rate limiting",
      "throttling",
      "api gateway"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Describe a decision you made where you intentionally delayed writing tests. How did you mitigate risk?",
    "category": "behavioral",
    "difficulty": 2,
    "expected_duration_sec": 120,
    "keywords": [
      "testing",
      "tradeoff",
      "risk"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "What strategies do you use to keep dependencies current without disrupting the roadmap?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "dependencies",
      "maintenance",
      "roadmap"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Explain how garbage collection works in your preferred programming language.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "garbage collection",
      "memory management"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Describe a time you improved the load performance of a customer-facing page end-to-end.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "performance",
      "frontend",
      "optimization",
      "metrics"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "How do you decide whether to render a feature on the client, the server, or both?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "rendering",
      "csr",
      "ssr",
      "hydration"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "What process do you follow to introduce a design system into an existing product?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "design system",
      "component library",
      "adoption"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Explain how you secure data flowing between a single-page app and its backend.",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 180,
    "keywords": [
      "security",
      "api",
      "authentication",
      "https"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Tell me about a release where a frontend change broke a backend contract. What did you learn?",
    "category": "behavioral",
    "difficulty": 2,
    "expected_duration_sec": 150,
    "keywords": [
      "contract testing",
      "communication",
      "postmortem"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "How do you monitor and observe client-side errors in production?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "observability",
      "errors",
      "telemetry"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Design a feature toggle service that works for both frontend and backend clients.",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "feature flags",
      "consistency",
      "rollout"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "When introducing a new API endpoint, how do you provide fallbacks for older clients?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "api versioning",
      "backwards compatibility",
      "fallbacks"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Explain how you would troubleshoot a blank screen error reported by users after deployment.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "debugging",
      "frontend",
      "monitoring"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "How do you ensure accessibility remains a priority while iterating quickly?",
    "category": "role_specific",
    "difficulty": 2,
    "expected_duration_sec": 120,
    "keywords": [
      "accessibility",
      "testing",
      "process"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Share a time you coordinated a cross-functional initiative touching UX, backend, and infrastructure.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "cross-functional",
      "collaboration",
      "initiative"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Explain the lifecycle of a GraphQL request compared with REST in your stack.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "graphql",
      "rest",
      "api"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "full-stack-developer",
    "text": "What tooling do you set up to maintain consistency between frontend and backend type definitions?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "types",
      "tooling",
      "schema"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Describe a time you optimized a slow ETL pipeline without pausing daily operations.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "etl",
      "optimization",
      "availability"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "How would you design a data ingestion pipeline that can replay events after a schema change?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "schema evolution",
      "ingestion",
      "replay"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Walk me through how you would monitor data quality across multiple sources.",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "data quality",
      "observability",
      "metrics"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Explain when you would choose batch processing over streaming for a new pipeline.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "batch",
      "streaming",
      "architecture"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Tell me about a partnership with analytics or product teams where data definitions were contentious.",
    "category": "behavioral",
    "difficulty": 2,
    "expected_duration_sec": 150,
    "keywords": [
      "stakeholders",
      "definitions",
      "communication"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "How do you implement GDPR or data retention requirements in your pipelines?",
    "category": "role_specific",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "compliance",
      "privacy",
      "retention"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Design a feature store architecture that supports both batch and real-time serving.",
    "category": "technical",
    "difficulty": 5,
    "expected_duration_sec": 240,
    "keywords": [
      "feature store",
      "real-time",
      "batch"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "What process do you follow to debug mismatched aggregates in a dashboard?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "debugging",
      "dashboards",
      "validation"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Explain the pros and cons of using CDC (change data capture) for database replication.",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "cdc",
      "replication",
      "databases"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "How do you budget compute costs for workflows running on a managed platform?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "cost management",
      "workflow orchestration"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "Share an example where you re-architected storage to handle an order-of-magnitude data growth.",
    "category": "behavioral",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "scalability",
      "storage",
      "growth"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "data-engineer",
    "text": "When would you prefer columnar formats like Parquet over row-based storage?",
    "category": "technical",
    "difficulty": 2,
    "expected_duration_sec": 120,
    "keywords": [
      "data formats",
      "parquet",
      "optimization"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Describe a time you identified suspicious activity before tooling raised an alert.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "threat detection",
      "intuition",
      "investigation"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "How would you triage a potential ransomware incident observed on a single endpoint?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "ransomware",
      "incident response",
      "triage"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Explain your workflow for keeping an incident response playbook current.",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "playbook",
      "maintenance",
      "process"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "What telemetry would you collect to detect lateral movement within a network?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "lateral movement",
      "telemetry",
      "network logs"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Tell me about a time you had to brief executives on an ongoing incident.",
    "category": "behavioral",
    "difficulty": 2,
    "expected_duration_sec": 150,
    "keywords": [
      "executive communication",
      "incident response"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "How do you coordinate with engineering to ensure detection rules stay accurate after feature changes?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "detection",
      "collaboration",
      "change management"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Design a dashboard that helps you monitor high-value assets in real time.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "dashboard",
      "real-time",
      "monitoring"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "What metrics do you review to evaluate the effectiveness of your SOC processes?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "metrics",
      "soc",
      "process improvement"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Explain how you would investigate unusual outbound traffic from a production server.",
    "category": "technical",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "network",
      "analysis",
      "forensics"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Share a time you conducted a lessons-learned session after a security incident.",
    "category": "behavioral",
    "difficulty": 3,
    "expected_duration_sec": 180,
    "keywords": [
      "post-incident",
      "lessons learned",
      "facilitation"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "How do you vet new threat intelligence sources before integrating them into workflows?",
    "category": "role_specific",
    "difficulty": 3,
    "expected_duration_sec": 150,
    "keywords": [
      "threat intelligence",
      "validation",
      "process"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "cyber-analyst",
    "text": "What steps do you take if you suspect an insider threat?",
    "category": "technical",
    "difficulty": 4,
    "expected_duration_sec": 210,
    "keywords": [
      "insider threat",
      "investigation",
      "protocols"
    ],
    "level": "entry",
    "requires_code": false
  },
  {
    "role_slug": "software-developer",
    "text": "Implement a function `reverse_words` that reverses the order of words in a sentence while preserving spacing. Explain your approach.\n\nExample:\nInput: 'hello  world'\nOutput: 'world  hello'\nExplain why the spacing is preserved and outline the string operations you would use.",
    "category": "technical",
    "level": "entry",
    "difficulty": 3,
    "expected_duration_sec": 300,
    "requires_code": true,
    "keywords": [
      "python",
      "strings",
      "algorithm",
      "coding"
    ],
    "legacy_texts": [
      "Write a Python function `reverse_words` that reverses the order of words in a sentence while preserving spacing. Explain your approach."
    ]
  },
  {
    "role_slug": "software-developer",
    "text": "Design a REST endpoint for tracking feature flags. Provide sample handler code that defines the route and returns mock data.\n\nExample:\nRequest: GET /api/v1/feature-flags?environment=staging\nResponse: {\"flags\": [{\"key\": \"checkout-redesign\", \"state\": \"enabled\"}, {\"key\": \"recommendations\", \"state\": \"disabled\"}]}\nHighlight how you would validate inputs and structure the response model.",
    "category": "technical",
    "level": "mid",
    "difficulty": 4,
    "expected_duration_sec": 420,
    "requires_code": true,
    "keywords": [
      "fastapi",
      "rest",
      "design"
    ],
    "legacy_texts": [
      "Design a REST endpoint for tracking feature flags. Provide sample FastAPI code that defines the route and returns mock data."
    ]
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Implement a React component that debounces user input before calling an async search API. Show the hook or component code and describe key considerations.\n\nExample:\nUser types: h, he, hel, help (within 200ms)\nDebounced call: search('help') after 500ms of silence\nExplain how you would test that only the final value triggers the API call.",
    "category": "technical",
    "level": "mid",
    "difficulty": 4,
    "expected_duration_sec": 420,
    "requires_code": true,
    "keywords": [
      "react",
      "hooks",
      "debounce"
    ]
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Create a Next.js API route that proxies requests to an external weather service and caches responses in memory.\n\nExample:\nRequest: GET /api/weather?city=Berlin\nProxy target: https://api.weather.example.com/current?city=Berlin\nCached response snippet: {\"city\": \"Berlin\", \"tempC\": 12}\nDescribe cache invalidation and error handling strategies.",
    "category": "technical",
    "level": "senior",
    "difficulty": 5,
    "expected_duration_sec": 480,
    "requires_code": true,
    "keywords": [
      "next.js",
      "api",
      "caching"
    ]
  },
  {
    "role_slug": "data-engineer",
    "text": "Write a SQL query that finds the rolling 7-day average of daily active users grouped by product. Include the SQL window function.\n\nExample table (daily_active_users):\n| dt        | product | active_users |\n|-----------|---------|--------------|\n| 2025-01-01| core    | 1200         |\n| 2025-01-02| core    | 1500         |\nTarget output row: dt=2025-01-07, product=core, rolling_avg=1385.7\nExplain how you would handle the first six days where the window is not yet full.",
    "category": "technical",
    "level": "mid",
    "difficulty": 4,
    "expected_duration_sec": 360,
    "requires_code": true,
    "keywords": [
      "sql",
      "window",
      "analytics"
    ]
  },
  {
    "role_slug": "data-engineer",
    "text": "Provide a Spark-based snippet to ingest JSON files from cloud storage, apply schema enforcement, and write partitioned Parquet output.\n\nExample:\nInput path: s3://analytics/raw/events/date=2025-01-01/*.json\nOutput path: s3://analytics/curated/events/\nPartition columns: country, event_date\nDiscuss how you would manage schema evolution and data quality checks.",
    "category": "role_specific",
    "level": "senior",
    "difficulty": 5,
    "expected_duration_sec": 480,
    "requires_code": true,
    "keywords": [
      "pyspark",
      "ingestion",
      "parquet"
    ],
    "legacy_texts": [
      "Provide a Python snippet using Apache Spark (PySpark) to ingest JSON files from cloud storage, apply schema enforcement, and write partitioned Parquet output."
    ]
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Create a script that parses a web server access log and detects IPs exceeding a request threshold within five minutes.\n\nExample log snippet:\n192.168.1.2 - - [02/Jan/2025:10:00:10 +0000] \"GET /login HTTP/1.1\" 200\n192.168.1.2 - - [02/Jan/2025:10:02:08 +0000] \"GET /checkout HTTP/1.1\" 200\nThreshold: >100 requests / 5 minutes\nExpected output: ['192.168.1.2']\nExplain how you would parameterize the window and threshold.",
    "category": "technical",
    "level": "entry",
    "difficulty": 3,
    "expected_duration_sec": 360,
    "requires_code": true,
    "keywords": [
      "python",
      "logs",
      "security"
    ],
    "legacy_texts": [
      "Create a Python script that parses a web server access log and detects IPs exceeding a request threshold within five minutes."
    ]
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Write a Sigma-style detection rule in YAML that alerts on PowerShell execution with suspicious encoded commands. Explain each field.\n\nExample event:\nImage: powershell.exe\nCommandLine: powershell.exe -EncodedCommand SQBtAHAAcgBlAHMAcwAgACcAaABlAGwAbABvACc=\nShow how the rule would match this event and what metadata (title, tags, level) you would set.",
    "category": "role_specific",
    "level": "senior",
    "difficulty": 4,
    "expected_duration_sec": 360,
    "requires_code": true,
    "keywords": [
      "sigma",
      "detection",
      "powershell"
    ]
  },
  {
    "role_slug": "software-developer",
    "text": "Implement a function that takes a string and returns true if it is a palindrome ignoring punctuation and casing. Provide a short note on the time complexity.\n\nExample:\nInput: \"A man, a plan, a canal: Panama\"\nOutput: True\nExplain the preprocessing steps and state the Big-O complexity.",
    "category": "technical",
    "level": "internship",
    "difficulty": 2,
    "expected_duration_sec": 240,
    "requires_code": true,
    "keywords": [
      "python",
      "strings",
      "complexity"
    ],
    "legacy_texts": [
      "Implement a function in Python that takes a string and returns true if it is a palindrome ignoring punctuation and casing. Provide a short note on the time complexity."
    ]
  },
  {
    "role_slug": "software-developer",
    "text": "Sketch a service-level design for a zero-downtime feature flag rollout across microservices. Describe code changes at the integration layer and safeguards you would automate.",
    "category": "technical",
    "level": "staff",
    "difficulty": 5,
    "expected_duration_sec": 420,
    "requires_code": false,
    "keywords": [
      "feature flags",
      "microservices",
      "progressive delivery"
    ]
  },
  {
    "role_slug": "software-developer",
    "text": "Design a concurrent worker pool that processes a channel of jobs with at-most-once semantics. Include code for graceful shutdown and metrics emission.\n\nExample:\nJobs channel receives: Job{ID:1}, Job{ID:2}\nExpected log output: processed job 1, processed job 2, shutdown complete\nDescribe how you would expose metrics for in-flight and completed jobs.",
    "category": "technical",
    "level": "senior",
    "difficulty": 5,
    "expected_duration_sec": 480,
    "requires_code": true,
    "keywords": [
      "golang",
      "concurrency",
      "observability"
    ],
    "legacy_texts": [
      "Write a concurrent worker pool in Go that processes a channel of jobs with at-most-once semantics. Include code for graceful shutdown and metrics emission."
    ]
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Build a minimal React component that debounces an input field and invokes a passed-in search callback after 500ms of inactivity. Show the component code and explain how you would unit test it.\n\nExample:\nInput sequence: ['t', 'to', 'tod', 'todo']\nExpected callback invocation: onSearch('todo') after 500ms pause\nMention how you would mock timers in Jest to assert debounce behavior.",
    "category": "technical",
    "level": "internship",
    "difficulty": 3,
    "expected_duration_sec": 300,
    "requires_code": true,
    "keywords": [
      "react",
      "hooks",
      "testing"
    ]
  },
  {
    "role_slug": "full-stack-developer",
    "text": "Outline how you would implement end-to-end error tracing for a React + FastAPI application, including code instrumentation for distributed tracing headers and backend correlation.",
    "category": "technical",
    "level": "staff",
    "difficulty": 5,
    "expected_duration_sec": 480,
    "requires_code": false,
    "keywords": [
      "observability",
      "distributed tracing",
      "instrumentation"
    ]
  },
  {
    "role_slug": "data-engineer",
    "text": "Write a SQL query that calculates a 7-day rolling average of daily active users per product_id from an events table. Include edge-case handling for the first week.\n\nExample events table row:\n| event_date | product_id | active_users |\n| 2025-03-10 | 42         | 980          |\nExpected output: rolling_avg column that uses available days when <7 exist.\nDescribe how you would COALESCE or CASE to avoid NULL averages.",
    "category": "technical",
    "level": "internship",
    "difficulty": 3,
    "expected_duration_sec": 360,
    "requires_code": true,
    "keywords": [
      "sql",
      "window functions",
      "time series"
    ]
  },
  {
    "role_slug": "data-engineer",
    "text": "Design a streaming architecture that reconciles late-arriving events. Provide pseudocode for a stateful Apache Flink operator that performs watermark-based aggregation and describe alerting for stuck partitions.\n\nExample scenario:\nSource emits events with timestamps up to 10 minutes late.\nExpected state: keyed by order_id with watermark gap of 5 minutes.\nExplain how you would emit side outputs for late data and trigger alerts when partitions stall for >15 minutes.",
    "category": "technical",
    "level": "staff",
    "difficulty": 5,
    "expected_duration_sec": 540,
    "requires_code": true,
    "keywords": [
      "streaming",
      "flink",
      "stateful processing"
    ]
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Write a short script that parses a Windows security log and flags repeated failed logons from the same IP within 10 minutes. Explain how you would tune thresholds to minimize false positives.\n\nExample log entries:\n2025-04-01T10:00:01Z Failed logon for user alice from 10.0.0.5\n2025-04-01T10:07:03Z Failed logon for user alice from 10.0.0.5\nThreshold: 5 failures / 10 minutes\nExpected alert: 10.0.0.5\nDiscuss how you would whitelist known scanners and adjust time windows.",
    "category": "technical",
    "level": "internship",
    "difficulty": 3,
    "expected_duration_sec": 300,
    "requires_code": true,
    "keywords": [
      "python",
      "log analysis",
      "security"
    ],
    "legacy_texts": [
      "Write a short Python script that parses a Windows security log and flags repeated failed logons from the same IP within 10 minutes. Explain how you would tune thresholds to minimize false positives."
    ]
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Walk through how you would codify threat hunting hypotheses into repeatable Jupyter notebooks. Include an example of a pandas query that joins process creation logs with threat intel indicators.\n\nExample:\nprocesses_df columns: ['host', 'timestamp', 'process', 'sha256']\nthreat_intel_df columns: ['sha256', 'actor']\nExpected query: merge on sha256, filter actor.notnull()\nDescribe how you would parameterize notebook cells for reusable hunts.",
    "category": "technical",
    "level": "mid",
    "difficulty": 4,
    "expected_duration_sec": 420,
    "requires_code": true,
    "keywords": [
      "threat hunting",
      "pandas",
      "intel"
    ]
  },
  {
    "role_slug": "cyber-analyst",
    "text": "Describe how you would automate purple-team exercises across cloud accounts, including IaC definitions for detection playbooks and code hooks that validate telemetry coverage in CI.",
    "category": "role_specific",
    "level": "staff",
    "difficulty": 5,
    "expected_duration_sec": 480,
    "requires_code": false,
    "keywords": [
      "purple team",
      "iac",
      "ci/cd"
    ]
  }
]